// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: i32;
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let _4: &[&str; 2];
    let _5: &[core::fmt::rt::Argument<'_>; 1];
    let _6: [core::fmt::rt::Argument<'_>; 1];
    let mut _7: core::fmt::rt::Argument<'_>;
    let _8: &i32;
    let _10: ();
    let mut _11: std::fmt::Arguments<'_>;
    let _12: &[&str; 2];
    let _13: &[core::fmt::rt::Argument<'_>; 1];
    let _14: [core::fmt::rt::Argument<'_>; 1];
    let mut _15: core::fmt::rt::Argument<'_>;
    let _16: &i32;
    scope 1 {
        debug x => _1;
        let _9: i32;
        scope 2 {
            debug x => _9;
        }
    }

    bb0: {
        _1 = const 10_i32;
        _4 = const main::promoted[1];
        _8 = &_1;
        _7 = core::fmt::rt::Argument::<'_>::new_display::<i32>(copy _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = [move _7];
        _5 = &_6;
        _3 = Arguments::<'_>::new_v1::<2, 1>(copy _4, copy _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = _print(move _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        _9 = const 20_i32;
        _12 = const main::promoted[0];
        _16 = &_9;
        _15 = core::fmt::rt::Argument::<'_>::new_display::<i32>(copy _16) -> [return: bb4, unwind continue];
    }

    bb4: {
        _14 = [move _15];
        _13 = &_14;
        _11 = Arguments::<'_>::new_v1::<2, 1>(copy _12, copy _13) -> [return: bb5, unwind continue];
    }

    bb5: {
        _10 = _print(move _11) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }
}

const main::promoted[0]: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

const main::promoted[1]: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}
