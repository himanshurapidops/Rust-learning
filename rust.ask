- why rust don't have http module inbuilt

- this 







-++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

- two varialbe have same value have different location to store that same value 

- when we change the value of the primitive data then it will change at the same address where the older value is stored
  println!("{}", std::ptr::eq(&u1,&u2));   to comapre the variable to check are theuy point to same thing or not

-  let maybe_num: Option<i32> = Some(10); let maybe: Option<String> = None;
   rust dont have null pointer but instead we have this
   if let Some(val) = maybe_num {
    println!("{}", val);
}

- drop() for manual drop 

- Rust is a statically typed language, which means that the type of a variable must be known at compile-time.
  In Rust, type inference is used to determine the type of a variable based on its initial value.
  let x = 5; // x is inferred to have type i32

    let a = "Hello"; // any direct string in the rust is a string slice &str

    let b = String::from(a);

    // println!( "{:}", &a);

    println!( "{:p}", &a);

    println!( "{:p}", &b);

    println!("{}", type_name_of_val(&a));

    println!("{}", type_name_of_val(&b));



    let b = String::from(a);

    println!("{}", b);
- box , refcell , rc , unsafe

- fn example() {
    let s = String::from("hello");
    print_str(&s);
    let r = &mut s; // ‚ö†Ô∏è Will fail if &s is still active
    r.push_str(" world");
}
------------------------------------------------------------------------------------
_1 = String::from("hello");     // Allocate String, move into _1 (s)
_2 = &_1;                       // Borrow immutably
call print_str(_2);             // Use the borrow
// _2's lifetime ends here IF compiler can see it's not used again
_3 = &mut _1;                   // Mutable borrow (fails if _2 is still alive)
call push_str(_3, " world");
-------------------------------------------------------------------------------------

MIR - Mid-level Intermediate Representation

----------------------------------------------
RUSTC_LOG=rustc_mir rustc your_file.rs

-----------------------------------------------
cargo install cargo-binutils
rustup component add llvm-tools-preview

cargo rustc -- --emit=mir
------------------------------------------------

// rustc main.rs --emit=thin-link-bitcode 
// rustc main.rs --emit=llvm-ir
// rustc main.rs --emit=obj
// rustc main.rs --emit=link
// rustc main.rs --emit=asm
// rustc main.rs --emit=llvm-bc

//RUSTFLAGS="-Zunpretty=mir" cargo rustc






Rust library is a collection of pre-written code that can be used in your program.
but they are not pre-compiled and need to be downloaded and compiled separately. 

- so rust dont have stable ABI , cause differnet compiler version may create different binary files so two different program may have different binary files. 
 which are not compatable.

- You can‚Äôt safely dynamically link two Rust crates unless they‚Äôre compiled with the same compiler version and exactly matching settings.

You can't build a plugin system with "drop-in" .so files that other programs load unless you use the C ABI, which forces you to abandon Rust types and ergonomics.


-------------------------------------------------------------------------------

gcc -0 main  ./main.c

compile -> objs  .o file
link -> exe(lib)


_______________________________________________________________________________

const and let are immutable  but we can make const gobal and const get replaced wherever it is used at compile time;

_______________________________________________________________________________

String and &str (string slice) are different String is struct and &str is pointer to string slice, str are immutable 

_______________________________________________________________________________

When we say a value‚Äôs lifetime is borrowed, like in:

let s: &str = "hello";

It means:

    [s] does not own the memory it points to.

    [s] is only allowed to use the string "hello" for a certain period of time, enforced by lifetimes.

    Someone else (usually the compiler or a String object) owns that memory.

    Rust guarantees that s cannot outlive the thing it points to.

_______________________________________________________________________________

For let s: &str = "hello";:
Concept	Details
Ownership	‚ùå No ‚Äî it doesn't own "hello"
Lifetime	Borrowed ‚Äî compiler ensures it's valid for enough time
Memory Location	Stack (fat pointer) + Static (read-only memory)
Drop Behavior	‚ùå s does not deallocate or clean anything

------------------------------------------------------------------------------

Return &'static str (only for string literals)  

If you‚Äôre returning a reference to a string literal (which lives forever), you can do this:

fn get_str() -> &'static str {
    "Hi"  // ‚úÖ string literals live forever, safe to return
}

fn main() {
    let result = get_str();
    println!("{}", result);
}

------------------------------------------------------------------------------

constant and immutable variable is stored in static memory 

in case of &str the fat pointe stored in stack.

mutable variable is stored in stack memory

__________________________________________________________________________________
  
to see how much memeory process is useing --> cat /process/:pid/status | grep VmSize grep VmRSS
                                          --> cat /process/:pid/maps 

_______________________________________________________________________________

enums are nothing but the largest memeory block obtained by the data types which are defined in enum

_______________________________________________________________________________

pub enum Option<T> {
    
    None , 
    Some(T)
}

this above enum 
------------------------------------------------------------------------------------

Box<i32>


Box<T> is a smart pointer to a heap-allocated value of type T. It is a thin pointer, it stores the values which is provided here 
i32 inside heap and pointer of that location at the stack.

Rc<vec<i32>>


Rc<T> is a reference counted pointer to a value of type T. It is a smart pointer that allows multiple ownership of the value.
It is a thin pointer, so the memory will deallocated only when all the references are dropped.


Arc<T> is an atomic reference counted pointer to a value of type T. It is a smart pointer that allows multiple ownership of the value.
It is a thick pointer, so the memory will not be deallocated until all the references are dropped.

RefCell<T> is a smart pointer to a value of type T. It is a thin pointer, so the memory will deallocated only when all the references are dropped.
It is a smart pointer that allows mutable access to the value through a reference to the inner value.

UnsafeCell<T> is a smart pointer to a value of type T. It is a thin pointer, so the memory will deallocated only when all the references are dropped.
It is a smart pointer that allows mutable access to the value through a reference to the inner value.

RefMut<T> is a smart pointer to a value of type T. It is a thin pointer, so the memory will deallocated only when all the references are dropped.

Mutex<T> is a smart pointer to a value of type T. It is a thin pointer, so the memory will deallocated only when all the references are dropped.    

_________________________________________________________________________________________________________________________________________

let mut x = String::from("one");
x = String::from("two"); // üî• drop("one") happens here


_1 = String::from("one");
_2 = String::from("two");
drop(_1);         // drop old value BEFORE assigning new one
_1 = _2;


----------------------------------------------------------------------------------------------------

References (&T) are just pointers:

let s = String::from("hi");
let r1 = &s;  // immutable reference
let r2 = r1;  // r1 is still usable ‚Äî it's Copy!

    &T (immutable reference) is Copy

    It means: you can make multiple references like r1, r2, etc.

    They're just pointing to the same data ‚Äî no ownership is taken.

‚úÖ So &T is Copy ‚Äî you can copy it around easily.
But &mut T (mutable reference) is not Copy.

Because:

    You can only have one mutable reference at a time (Rust's safety rule)

    Allowing multiple copies of &mut T would break the rule

let mut x = 10;
let r1 = &mut x;
// let r2 = r1; ‚ùå `r1` is moved, because &mut T is not Copy

So:

    &mut T is not Copy

    &T is Copy

    ------------------------------------------------------------------------------